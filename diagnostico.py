import pandas as pd
from parametros import cargar_parametros

def diagnosticar_modelo():
    """
    Diagnostica los par√°metros del modelo para entender por qu√© la F.O. es 0
    """
    
    print("üîç DIAGN√ìSTICO DEL MODELO")
    print("="*50)
    
    # Cargar par√°metros
    print("\n1Ô∏è‚É£ Cargando par√°metros...")
    parametros = cargar_parametros(modo_testing=True, horizonte="mensual")
    
    # Extraer informaci√≥n clave
    Z = parametros["Z"]
    T = parametros["T"]
    zeta = parametros["zeta"]
    lambda_ = parametros["lambda"]
    kappa = parametros["kappa"]
    Gamma = parametros["Gamma"]
    I = parametros["I"]
    IDD = parametros["IDD"]
    D = parametros["D"]
    
    print(f"\n2Ô∏è‚É£ PAR√ÅMETROS B√ÅSICOS:")
    print(f"   ‚Ä¢ Zonas: {len(Z)} (IDs: {Z})")
    print(f"   ‚Ä¢ D√≠as: {len(T)} (del {min(T)} al {max(T)})")
    print(f"   ‚Ä¢ Œª (lambda): {lambda_}")
    print(f"   ‚Ä¢ Œ∫ (kappa): {kappa}")
    print(f"   ‚Ä¢ Œì (Gamma): {Gamma}")
    
    print(f"\n3Ô∏è‚É£ PELIGROSIDAD INICIAL:")
    for z in Z:
        print(f"   ‚Ä¢ Zona {z}: Œ∂[{z},1] = {zeta[z]:.6f}")
    
    print(f"\n4Ô∏è‚É£ DATOS DE INCIDENCIA:")
    print("   Incidencias por delito y zona:")
    for d in D:
        for z in Z:
            incidencia = I.get((d, z), 0)
            da√±o = IDD.get(d, 0)
            producto = incidencia * da√±o
            print(f"      Delito {d}, Zona {z}: I={incidencia:.3f}, IDD={da√±o:.3f}, I√óIDD={producto:.6f}")
    
    print(f"\n5Ô∏è‚É£ C√ÅLCULO DE GAMMA:")
    print("   Peligrosidad te√≥rica por zona:")
    for z in Z:
        peligrosidad_teorica = sum(I.get((d, z), 0) * IDD[d] for d in D)
        print(f"      Zona {z}: {peligrosidad_teorica:.6f}")
    
    print(f"\n6Ô∏è‚É£ AN√ÅLISIS DEL PROBLEMA:")
    
    # Verificar si zeta inicial es 0
    zeta_total = sum(zeta[z] for z in Z)
    if zeta_total < 1e-10:
        print("   ‚ö†Ô∏è  PROBLEMA: Peligrosidad inicial ‚âà 0")
        print("      ‚Ä¢ Si Œ∂[z,1] = 0, entonces no se requieren patrullas inicialmente")
        print("      ‚Ä¢ La restricci√≥n de cobertura Œ∫√óŒ∂[z,t-1] ‚âà 0")
        print("      ‚Ä¢ El modelo puede asignar 0 patrullas sin penalizaci√≥n")
        
    # Verificar datos de incidencia
    incidencias_total = sum(I.get((d, z), 0) for d in D for z in Z)
    if incidencias_total < 1e-10:
        print("   ‚ö†Ô∏è  PROBLEMA: Datos de incidencia ‚âà 0")
        print("      ‚Ä¢ Sin incidencias, no hay peligrosidad base")
        
    # Verificar IDD
    idd_total = sum(IDD[d] for d in D)
    if idd_total < 1e-10:
        print("   ‚ö†Ô∏è  PROBLEMA: √çndices de da√±o ‚âà 0")
        
    if Gamma < 1e-10:
        print("   ‚ö†Ô∏è  PROBLEMA: Gamma ‚âà 0")
        print("      ‚Ä¢ Divisi√≥n por cero en c√°lculo de zeta")
        
    print(f"\n7Ô∏è‚É£ REQUERIMIENTOS DE PATRULLAS:")
    for z in Z:
        requerimiento = kappa * zeta[z]
        print(f"   ‚Ä¢ Zona {z}: Œ∫√óŒ∂ = {kappa}√ó{zeta[z]:.6f} = {requerimiento:.6f} patrullas")
    
    requerimiento_total = sum(kappa * zeta[z] for z in Z)
    print(f"   ‚Ä¢ TOTAL REQUERIDO: {requerimiento_total:.6f} patrullas por turno")
    
    print(f"\n8Ô∏è‚É£ RECURSOS DISPONIBLES:")
    C = parametros["C"]
    P = parametros["P"]
    print(f"   ‚Ä¢ Carabineros disponibles: {len(C)}")
    print(f"   ‚Ä¢ Veh√≠culos disponibles: {len(P)}")
    print(f"   ‚Ä¢ M√°ximo patrullas te√≥ricas: {min(len(C), len(P))}")
    
    if requerimiento_total > 0:
        ratio_cobertura = min(len(C), len(P)) / requerimiento_total
        print(f"   ‚Ä¢ Ratio cobertura: {ratio_cobertura:.2f} (>1 = exceso, <1 = d√©ficit)")
    
    print(f"\n9Ô∏è‚É£ AN√ÅLISIS ESPEC√çFICO DEL PROBLEMA:")
    
    if requerimiento_total > min(len(C), len(P)):
        print("   ‚úÖ RECURSOS INSUFICIENTES - modelo debe optimizar")
        print("      ‚Ä¢ Se requieren m√°s patrullas de las disponibles")
        print("      ‚Ä¢ El modelo deber√≠a generar d√©ficits y peligrosidad creciente")
    elif requerimiento_total < 0.1:
        print("   ‚ö†Ô∏è  REQUERIMIENTOS MUY BAJOS")
        print("      ‚Ä¢ Con pocos requerimientos, el modelo puede asignar 0 patrullas")
        print("      ‚Ä¢ Incrementar Œ∫ o peligrosidad inicial")
    else:
        print("   ‚ùì CASO INTERMEDIO")
        print("      ‚Ä¢ Analizar restricciones espec√≠ficas")
    
    print(f"\n10Ô∏è‚É£ SOLUCIONES SUGERIDAS:")
    print("   1. Verificar archivos CSV de datos")
    print("   2. Incrementar valores de incidencia artificialmente para testing")
    print("   3. Establecer peligrosidad inicial m√≠nima (ej. 0.1)")
    print("   4. Revisar f√≥rmula de c√°lculo de zeta")
    print("   5. Usar datos reales de criminalidad")

if __name__ == "__main__":
    diagnosticar_modelo() 